// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Dialog> renders 1`] = `
<View
  collapsable={undefined}
  pointerEvents="none"
  style={
    Object {
      "alignContent": "center",
      "alignItems": "center",
      "backgroundColor": "rgba(0,0,0,0.5)",
      "height": "100%",
      "justifyContent": "center",
      "left": 0,
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <View
    collapsable={undefined}
    pointerEvents="auto"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderRadius": 3,
        "maxHeight": "100%",
        "minWidth": "66%",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.26,
        "shadowRadius": 5,
        "transform": Array [
          Object {
            "translateY": 1334,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RCTScrollView
        onScroll={[Function]}
        style={
          Array [
            Object {
              "paddingBottom": 16,
              "paddingHorizontal": 16,
            },
            false,
          ]
        }
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</View>
`;

exports[`<Dialog> when {background} 1`] = `
<View
  collapsable={undefined}
  pointerEvents="none"
  style={
    Object {
      "alignContent": "center",
      "alignItems": "center",
      "height": "100%",
      "justifyContent": "center",
      "left": 0,
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <View
    collapsable={undefined}
    pointerEvents="auto"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderRadius": 3,
        "maxHeight": "100%",
        "minWidth": "66%",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.26,
        "shadowRadius": 5,
        "transform": Array [
          Object {
            "translateY": 1334,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RCTScrollView
        onScroll={[Function]}
        style={
          Array [
            Object {
              "paddingBottom": 16,
              "paddingHorizontal": 16,
            },
            false,
          ]
        }
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</View>
`;

exports[`<Dialog> when {children} 1`] = `
<View
  collapsable={undefined}
  pointerEvents="none"
  style={
    Object {
      "alignContent": "center",
      "alignItems": "center",
      "backgroundColor": "rgba(0,0,0,0.5)",
      "height": "100%",
      "justifyContent": "center",
      "left": 0,
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <View
    collapsable={undefined}
    pointerEvents="auto"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderRadius": 3,
        "maxHeight": "100%",
        "minWidth": "66%",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.26,
        "shadowRadius": 5,
        "transform": Array [
          Object {
            "translateY": 1334,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RCTScrollView
        onScroll={[Function]}
        style={
          Array [
            Object {
              "paddingBottom": 16,
              "paddingHorizontal": 16,
            },
            false,
          ]
        }
      >
        <View>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            numberOfLines={undefined}
            style={
              Array [
                Object {
                  "color": "#4a4a4a",
                  "fontFamily": undefined,
                },
                false,
                false,
                false,
                false,
                Object {
                  "fontSize": 16,
                  "lineHeight": 20.8,
                },
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                Object {},
              ]
            }
          >
            Hello World
          </Text>
        </View>
      </RCTScrollView>
    </View>
  </View>
</View>
`;

exports[`<Dialog> when {highlight} 1`] = `
<View
  collapsable={undefined}
  pointerEvents="none"
  style={
    Object {
      "alignContent": "center",
      "alignItems": "center",
      "backgroundColor": "rgba(0,0,0,0.5)",
      "height": "100%",
      "justifyContent": "center",
      "left": 0,
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <View
    collapsable={undefined}
    pointerEvents="auto"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderRadius": 3,
        "maxHeight": "100%",
        "minWidth": "66%",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.26,
        "shadowRadius": 5,
        "transform": Array [
          Object {
            "translateY": 1334,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        collapsable={undefined}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "borderRadius": 3,
            "marginHorizontal": 5,
            "opacity": 1,
            "position": "absolute",
            "right": -5,
            "top": 0,
            "zIndex": 1,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Array [
              Object {
                "alignContent": "center",
                "alignItems": "center",
                "borderRadius": 3,
                "display": "flex",
                "flexDirection": "row",
                "justifyContent": "center",
              },
              Object {
                "height": 45,
                "minWidth": 45,
                "paddingHorizontal": 30,
              },
              false,
              false,
              false,
              Object {
                "paddingHorizontal": 0,
              },
              false,
              false,
              false,
              false,
              false,
              false,
              false,
            ]
          }
        >
          <Image
            resizeMode="contain"
            source={1}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                  "height": 20,
                  "width": 20,
                },
                undefined,
                undefined,
              ]
            }
          />
        </View>
      </View>
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        numberOfLines={undefined}
        style={
          Array [
            Object {
              "color": "#4a4a4a",
              "fontFamily": undefined,
            },
            false,
            false,
            Object {
              "fontWeight": "bold",
            },
            false,
            Object {
              "fontSize": 16,
              "lineHeight": 20.8,
            },
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            Object {
              "color": "#ffffff",
              "fontSize": 20,
              "padding": 16,
            },
          ]
        }
      >
        Hello world
      </Text>
      <RCTScrollView
        onScroll={[Function]}
        style={
          Array [
            Object {
              "paddingBottom": 16,
              "paddingHorizontal": 16,
            },
            false,
          ]
        }
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</View>
`;

exports[`<Dialog> when {onClose} 1`] = `
<View
  collapsable={undefined}
  pointerEvents="none"
  style={
    Object {
      "alignContent": "center",
      "alignItems": "center",
      "backgroundColor": "rgba(0,0,0,0.5)",
      "height": "100%",
      "justifyContent": "center",
      "left": 0,
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <View
    collapsable={undefined}
    pointerEvents="auto"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderRadius": 3,
        "maxHeight": "100%",
        "minWidth": "66%",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.26,
        "shadowRadius": 5,
        "transform": Array [
          Object {
            "translateY": 1334,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        collapsable={undefined}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "borderRadius": 3,
            "marginHorizontal": 5,
            "opacity": 1,
            "position": "absolute",
            "right": -5,
            "top": 0,
            "zIndex": 1,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Array [
              Object {
                "alignContent": "center",
                "alignItems": "center",
                "borderRadius": 3,
                "display": "flex",
                "flexDirection": "row",
                "justifyContent": "center",
              },
              Object {
                "height": 45,
                "minWidth": 45,
                "paddingHorizontal": 30,
              },
              false,
              false,
              false,
              Object {
                "paddingHorizontal": 0,
              },
              false,
              false,
              false,
              false,
              false,
              false,
              false,
            ]
          }
        >
          <Image
            resizeMode="contain"
            source={1}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                  "height": 20,
                  "width": 20,
                },
                undefined,
                undefined,
              ]
            }
          />
        </View>
      </View>
      <RCTScrollView
        onScroll={[Function]}
        style={
          Array [
            Object {
              "paddingBottom": 16,
              "paddingHorizontal": 16,
            },
            false,
          ]
        }
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</View>
`;

exports[`<Dialog> when {style} 1`] = `
<View
  collapsable={undefined}
  pointerEvents="none"
  style={
    Object {
      "alignContent": "center",
      "alignItems": "center",
      "backgroundColor": "rgba(0,0,0,0.5)",
      "height": "100%",
      "justifyContent": "center",
      "left": 0,
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <View
    collapsable={undefined}
    pointerEvents="auto"
    style={
      Object {
        "backgroundColor": "black",
        "borderRadius": 3,
        "maxHeight": "100%",
        "minWidth": "66%",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.26,
        "shadowRadius": 5,
        "transform": Array [
          Object {
            "translateY": 1334,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RCTScrollView
        onScroll={[Function]}
        style={
          Array [
            Object {
              "paddingBottom": 16,
              "paddingHorizontal": 16,
            },
            false,
          ]
        }
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</View>
`;

exports[`<Dialog> when {styleContainer} 1`] = `
<View
  collapsable={undefined}
  pointerEvents="none"
  style={
    Object {
      "alignContent": "center",
      "alignItems": "center",
      "backgroundColor": "black",
      "height": "100%",
      "justifyContent": "center",
      "left": 0,
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <View
    collapsable={undefined}
    pointerEvents="auto"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderRadius": 3,
        "maxHeight": "100%",
        "minWidth": "66%",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.26,
        "shadowRadius": 5,
        "transform": Array [
          Object {
            "translateY": 1334,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RCTScrollView
        onScroll={[Function]}
        style={
          Array [
            Object {
              "paddingBottom": 16,
              "paddingHorizontal": 16,
            },
            false,
          ]
        }
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</View>
`;

exports[`<Dialog> when {title} 1`] = `
<View
  collapsable={undefined}
  pointerEvents="none"
  style={
    Object {
      "alignContent": "center",
      "alignItems": "center",
      "backgroundColor": "rgba(0,0,0,0.5)",
      "height": "100%",
      "justifyContent": "center",
      "left": 0,
      "opacity": 0,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <View
    collapsable={undefined}
    pointerEvents="auto"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderRadius": 3,
        "maxHeight": "100%",
        "minWidth": "66%",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.26,
        "shadowRadius": 5,
        "transform": Array [
          Object {
            "translateY": 1334,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        numberOfLines={undefined}
        style={
          Array [
            Object {
              "color": "#4a4a4a",
              "fontFamily": undefined,
            },
            false,
            false,
            Object {
              "fontWeight": "bold",
            },
            false,
            Object {
              "fontSize": 16,
              "lineHeight": 20.8,
            },
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            Object {
              "fontSize": 20,
              "padding": 16,
            },
          ]
        }
      >
        Hello world
      </Text>
      <RCTScrollView
        onScroll={[Function]}
        style={
          Array [
            Object {
              "paddingBottom": 16,
              "paddingHorizontal": 16,
            },
            false,
          ]
        }
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</View>
`;

exports[`<Dialog> when {visible} 1`] = `
<View
  collapsable={undefined}
  pointerEvents="auto"
  style={
    Object {
      "alignContent": "center",
      "alignItems": "center",
      "backgroundColor": "rgba(0,0,0,0.5)",
      "height": "100%",
      "justifyContent": "center",
      "left": 0,
      "opacity": 1,
      "position": "absolute",
      "top": 0,
      "width": "100%",
      "zIndex": 2,
    }
  }
>
  <View
    collapsable={undefined}
    pointerEvents="auto"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderRadius": 3,
        "maxHeight": "100%",
        "minWidth": "66%",
        "shadowColor": "#000000",
        "shadowOffset": Object {
          "height": 2,
          "width": 0,
        },
        "shadowOpacity": 0.26,
        "shadowRadius": 5,
        "transform": Array [
          Object {
            "translateY": 0,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RCTScrollView
        onScroll={[Function]}
        style={
          Array [
            Object {
              "paddingBottom": 16,
              "paddingHorizontal": 16,
            },
            false,
          ]
        }
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</View>
`;
